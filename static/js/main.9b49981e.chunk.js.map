{"version":3,"sources":["pages/MainPage.tsx","App.tsx","config.ts","serviceWorker.ts","index.tsx"],"names":["MainPage","props","hasEthereum","distributionContract","readRewardsDistributionsHistory","useCallback","a","console","log","options","fromBlock","toBlock","filter","recipient","alert","getPastEvents","events","readRewards","map","distributionEvent","returnValues","amount","BigInt","transactionHash","Grid","container","direction","spacing","item","Typography","variant","Button","style","color","borderColor","onClick","App","window","ethereum","useEffect","enable","tryToConnect","web3","useMemo","Web3","orbsRewardsDistributionContract","eth","Contract","orbsRewardsDistributionContractJSON","abi","className","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"giKAsEeA,MA5Df,SAAkBC,GAAgB,IACxBC,EAAsCD,EAAtCC,YAAaC,EAAyBF,EAAzBE,qBAIfC,EAAkCC,sBAAW,sBAAC,gCAAAC,EAAA,yDAClDC,QAAQC,IAAI,UACNC,EAAU,CACdC,UAL4B,QAM5BC,QAAS,SACTC,OAAQ,CAAEC,UAAW,+CAGlBV,EAR6C,uBAShDW,MAAM,oCAT0C,iCAalDA,MAAM,WAb4C,SAe7BX,EAAqBY,cAAc,oBAAqBN,GAf3B,cAe5CO,EAf4C,OAiB5CC,EAAcD,EAAOE,KAAI,SAAAV,GAC7B,MAAO,CACLW,kBAAmBX,EAAIY,aAAaD,kBACpCE,OAAQC,OAAOd,EAAIY,aAAaC,QAChCE,gBAAiBf,EAAIe,oBAIzBT,MAAMG,GAzB4C,kBA0B3CA,GA1B2C,4CA2BjD,CAACd,IAEJ,OAAKD,EAOH,6BACE,kBAACsB,EAAA,EAAD,CAAMC,WAAS,EAACC,UAAW,SAAUC,QAAS,GAC5C,kBAACH,EAAA,EAAD,CAAMI,MAAI,GACR,kBAACC,EAAA,EAAD,CAAYC,QAAS,MAArB,yBAIF,kBAACN,EAAA,EAAD,CAAMI,MAAI,GACR,kBAACG,EAAA,EAAD,CAAQC,MAAO,CAAEC,MAAO,UAAWC,YAAa,WAAaJ,QAAS,YAAtE,wCAGF,kBAACN,EAAA,EAAD,CAAMI,MAAI,GACR,kBAACG,EAAA,EAAD,CAAQC,MAAO,CAAEC,MAAO,UAAWC,YAAa,WAAaJ,QAAS,WAAYK,QAAS/B,GAA3F,wCAlBC,sD,SCgBIgC,MAnDf,WACE,IAAMlC,IAAiBmC,OAAeC,SAEtCC,qBAAU,WAAM,4CACd,sBAAAjC,EAAA,0DACMJ,EADN,0CAGamC,OAAeC,SAASE,SAHrC,OAIMjC,QAAQC,IAAI,aAJlB,gDAMMD,QAAQC,IAAR,wCANN,0DADc,uBAAC,WAAD,wBAYdiC,KACC,CAACvC,IAEJ,IAAMwC,EAAOC,mBAAQ,WACnB,OAAKzC,EAIgB,IAAI0C,IAAMP,OAAeC,UAHrC,OAMR,CAACpC,IAEE2C,EAAkCF,mBAA4B,WAClE,GAAKzC,GAAiBwC,EAStB,OAL6B,IAAIA,EAAKI,IAAIC,SACxCC,EAAoCC,ICzCG,gDD+CxC,CAAC/C,EAAawC,IAEjB,OACE,yBAAKQ,UAAU,OACb,4BAAQA,UAAU,cAChB,kBAAC,EAAD,CAAUhD,YAAaA,EAAaC,qBAAsB0C,OE3C9CM,QACW,cAA7Bd,OAAOe,SAASC,UAEe,UAA7BhB,OAAOe,SAASC,UAEhBhB,OAAOe,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5D,QAAQ4D,MAAMA,EAAMC,c","file":"static/js/main.9b49981e.chunk.js","sourcesContent":["import React, {useCallback} from 'react';\nimport Button from '@material-ui/core/Button';\nimport { Grid, Typography } from '@material-ui/core';\nimport {Contract} from \"web3-eth-contract\";\n\ninterface IProps {\n  hasEthereum?: any;\n  distributionContract?: Contract;\n}\n\nfunction MainPage(props: IProps) {\n  const { hasEthereum, distributionContract } = props;\n\n  const ORBS_TDE_ETHEREUM_BLOCK = 7439168;\n\n  const readRewardsDistributionsHistory = useCallback(async () => {\n    console.log('Called')\n    const options = {\n      fromBlock: ORBS_TDE_ETHEREUM_BLOCK,\n      toBlock: 'latest',\n      filter: { recipient: '0xC5e624d6824e626a6f14457810E794E4603CFee2' },\n    };\n\n    if (!distributionContract) {\n      alert('No rewards distribution contract');\n      return;\n    }\n\n    alert('Reading');\n\n    const events = await distributionContract.getPastEvents('RewardDistributed', options);\n\n    const readRewards = events.map(log => {\n      return {\n        distributionEvent: log.returnValues.distributionEvent as string,\n        amount: BigInt(log.returnValues.amount),\n        transactionHash: log.transactionHash,\n      };\n    });\n\n    alert(readRewards);\n    return readRewards;\n  }, [distributionContract]);\n\n  if (!hasEthereum) {\n    return <div>\n      No ethereum provider\n    </div>\n  }\n\n  return (\n    <div>\n      <Grid container direction={'column'} spacing={2}>\n        <Grid item>\n          <Typography variant={'h3'}>\n            Events reading tests\n          </Typography>\n        </Grid>\n        <Grid item>\n          <Button style={{ color: '#ffffff', borderColor: '#ffffff' }} variant={\"outlined\"} >Read older events - ERC 20 contract</Button>\n        </Grid>\n\n        <Grid item>\n          <Button style={{ color: '#ffffff', borderColor: '#ffffff' }} variant={\"outlined\"} onClick={readRewardsDistributionsHistory}>Read older events - Orbs contract</Button>\n        </Grid>\n      </Grid>\n    </div>\n);\n}\n\nexport default MainPage;\n","import React, {useEffect, useMemo} from 'react';\nimport Web3 from 'web3';\nimport logo from './logo.svg';\nimport './App.css';\nimport MainPage from './pages/MainPage';\nimport orbsRewardsDistributionContractJSON from './contracts/OrbsRewardsDistribution.json';\nimport {AbiItem} from \"web3-utils\";\nimport { Contract } from 'web3-eth-contract';\nimport {ORBS_REWARDS_CONTRACT_ADDRESS} from \"./config\";\n\nfunction App() {\n  const hasEthereum = !!(window as any).ethereum;\n\n  useEffect(() => {\n    async function tryToConnect() {\n      if (hasEthereum) {\n        try {\n          await (window as any).ethereum.enable();\n          console.log('Enabled !');\n        } catch (e) {\n          console.log(`Error when eneabling : ${e}`)\n        }\n      }\n    }\n\n    tryToConnect();\n  }, [hasEthereum]);\n\n  const web3 = useMemo(() => {\n    if (!hasEthereum) {\n      return null;\n    }\n\n    const web3Instance = new Web3((window as any).ethereum as any);\n\n    return web3Instance;\n  }, [hasEthereum])\n\n  const orbsRewardsDistributionContract = useMemo<Contract|undefined>(() => {\n    if (!hasEthereum || ! web3) {\n      return undefined;\n    }\n\n    const distributionContract = new web3.eth.Contract(\n      orbsRewardsDistributionContractJSON.abi as AbiItem[],\n      ORBS_REWARDS_CONTRACT_ADDRESS\n    );\n\n    return distributionContract;\n\n  }, [hasEthereum, web3]);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <MainPage hasEthereum={hasEthereum} distributionContract={orbsRewardsDistributionContract}/>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","export const IS_DEV = process.env.NODE_ENV !== 'production';\n\n\nexport const ORBS_REWARDS_CONTRACT_ADDRESS = '0xb2969e54668394bcA9B8AF61bC39B92754b7A7a0';\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}