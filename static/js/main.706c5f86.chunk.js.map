{"version":3,"sources":["utils/utils.ts","pages/MainPage.tsx","config.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["logFunction","params","isMobile","alert","join","console","log","useStyles","makeStyles","theme","createStyles","input","color","textAlign","MainPage","props","classes","latestBlockNumber","hasEthereum","distributionContract","ercContract","lowBlock","useNumber","highBlock","useStateful","orbsContractInteractionActive","useBoolean","orbsContractInteractionHasError","orbsContractInteractionMessage","orbsContractInteractionError","ercContractInteractionActive","ercContractInteractionHasError","ercContractInteractionMessage","ercContractInteractionError","useEffect","setValue","readRewardsDistributionsHistory","useCallback","a","options","fromBlock","value","toBlock","filter","recipient","setTrue","setFalse","getPastEvents","events","readRewards","map","distributionEvent","returnValues","amount","toString","transactionHash","length","message","readErc20Events","blocksRangeSize","style","margin","Grid","container","direction","spacing","item","Typography","variant","toLocaleString","justify","alignItems","Input","type","onChange","e","parseInt","target","inputProps","className","Button","borderColor","onClick","width","Slider","event","values","min","max","valueLabelDisplay","CircularProgress","App","window","ethereum","enable","tryToConnect","web3","useMemo","Web3","readLatestBlockFunc","eth","getBlockNumber","latest","then","latestBlock","catch","error","orbsRewardsDistributionContract","Contract","orbsRewardsDistributionContractJSON","abi","erc20Contract","thetherContractJSON","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.706c5f86.chunk.js","sourcesContent":["import {isMobile} from \"react-device-detect\";\n\nexport const logFunction = (...params: any) => {\n  if (isMobile) {\n    alert(params.join(' : '));\n  }\n\n  console.log(...params);\n}\n","import React, {useCallback, useEffect} from 'react';\nimport Button from '@material-ui/core/Button';\nimport {CircularProgress, Grid, Input, Slider, Typography} from '@material-ui/core';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport {Contract} from \"web3-eth-contract\";\nimport {logFunction} from \"../utils/utils\";\nimport { useBoolean, useStateful, useNumber } from 'react-hanger';\nimport TextField from '@material-ui/core/TextField';\nimport {CURRENT_LATEST, ORBS_TDE_ETHEREUM_BLOCK} from \"../config\";\n\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    input: {\n      color: 'white',\n      '& .MuiInputBase-input' : {\n        textAlign: 'center',\n      }\n    },\n  }),\n);\n\ninterface IProps {\n  latestBlockNumber: number;\n  hasEthereum?: any;\n  distributionContract?: Contract;\n  ercContract?: Contract;\n}\n\nfunction MainPage(props: IProps) {\n  const classes = useStyles();\n  const { latestBlockNumber, hasEthereum, distributionContract, ercContract } = props;\n  const lowBlock = useNumber(ORBS_TDE_ETHEREUM_BLOCK);\n  const highBlock = useStateful<number>(latestBlockNumber);\n  const orbsContractInteractionActive = useBoolean(false);\n  const orbsContractInteractionHasError = useBoolean(false);\n  const orbsContractInteractionMessage = useStateful('');\n  const orbsContractInteractionError = useStateful('');\n\n  const ercContractInteractionActive = useBoolean(false);\n  const ercContractInteractionHasError = useBoolean(false);\n  const ercContractInteractionMessage = useStateful('');\n  const ercContractInteractionError = useStateful('');\n\n  useEffect(() => {\n    highBlock.setValue(latestBlockNumber);\n  }, [latestBlockNumber])\n  const readRewardsDistributionsHistory = useCallback(async () => {\n    // logFunction('Called')\n    const options = {\n      fromBlock: lowBlock.value,\n      toBlock: highBlock.value,\n      // toBlock: 'latest',\n      filter: { recipient: '0xC5e624d6824e626a6f14457810E794E4603CFee2' },\n    };\n\n    if (!distributionContract) {\n      logFunction('No rewards distribution contract');\n      return;\n    }\n\n    // logFunction('Reading');\n\n    // Reset state\n    orbsContractInteractionActive.setTrue();\n    orbsContractInteractionHasError.setFalse();\n    orbsContractInteractionMessage.setValue('');\n    orbsContractInteractionError.setValue('');\n\n    try {\n      const events = await distributionContract.getPastEvents('RewardDistributed', options);\n\n      const readRewards = events.map(log => {\n        return {\n          distributionEvent: log.returnValues.distributionEvent as string,\n          amount: log.returnValues.amount.toString(),\n          transactionHash: log.transactionHash,\n        };\n      });\n\n      // logFunction('Got rewards' , readRewards.length);\n      // orbsContractInteractionMessage.setValue(`Got ${JSON.stringify(readRewards)}`)\n      orbsContractInteractionMessage.setValue(`Got ${readRewards.length} ORBS rewards events`);\n      return readRewards;\n    } catch (e) {\n      // logFunction('error', e);\n      orbsContractInteractionHasError.setTrue();\n      orbsContractInteractionError.setValue(e.message);\n      return [];\n    } finally {\n      orbsContractInteractionActive.setFalse();\n    }\n  }, [distributionContract, orbsContractInteractionActive, lowBlock, highBlock]);\n\n\n  const readErc20Events = useCallback(async () => {\n    // logFunction('Called erc')\n\n    if (!ercContract) {\n      logFunction('No erc contract');\n      return;\n    }\n\n    // Reset state\n    ercContractInteractionActive.setTrue();\n    ercContractInteractionHasError.setFalse();\n    ercContractInteractionMessage.setValue('');\n    ercContractInteractionError.setValue('');\n\n    const options = {\n      fromBlock: lowBlock.value,\n      toBlock: highBlock.value,\n      // toBlock: 'latest',\n      // filter: { recipient: '0xC5e624d6824e626a6f14457810E794E4603CFee2' },\n    };\n\n    try {\n      const events = await ercContract.getPastEvents('Transfer', options);\n\n      // const readRewards = events.map(log => {\n      //   return {\n      //     distributionEvent: log.returnValues.distributionEvent as string,\n      //     amount: BigInt(log.returnValues.amount),\n      //     transactionHash: log.transactionHash,\n      //   };\n      // });\n\n      // logFunction('Got rewards' , readRewards.length);\n      // ercContractInteractionMessage.setValue(JSON.stringify(events.slice(0, 2)))\n      ercContractInteractionMessage.setValue(`Got ${events.length} erc20 Transfer events`)\n      return [];\n    } catch (e) {\n      // logFunction('error', e);\n      ercContractInteractionHasError.setTrue();\n      ercContractInteractionError.setValue(e.message);\n      return [];\n    } finally {\n      ercContractInteractionActive.setFalse();\n    }\n  }, [distributionContract, ercContractInteractionActive, lowBlock, highBlock]);\n\n  if (!hasEthereum) {\n    return <div>\n      No ethereum provider\n    </div>\n  }\n\n  const blocksRangeSize = highBlock.value - lowBlock.value;\n\n  return (\n    <div style={{ margin: '0.5em'}}>\n      <Grid container direction={'column'} spacing={2}>\n        {/* Titles */}\n        <Grid item>\n          <Typography variant={'h3'}>\n            Events reading tests\n          </Typography>\n          <Typography variant={'h4'}>\n            {lowBlock.value.toLocaleString()} - {highBlock.value.toLocaleString()}\n          </Typography>\n          <Typography variant={'h5'}>\n            ({blocksRangeSize.toLocaleString()} {blocksRangeSize === 1 ? 'block' : 'blocks' })\n          </Typography>\n        </Grid>\n\n         {/*Inputs - manual*/}\n        <Grid item container justify={'center'} alignItems={'center'}>\n          <Grid item>\n            <Typography variant={'body1'}>\n              Low block\n            </Typography>\n            <Input color={'primary'} type={'number'} value={lowBlock.value} onChange={e => lowBlock.setValue(parseInt(e.target.value))} inputProps={{ 'aria-label': 'description' }} className={classes.input} />\n          </Grid>\n\n          <Grid item>\n            <Typography variant={'body1'}>\n              High block\n            </Typography>\n            <Input color={'primary'} type={'number'} value={highBlock.value} onChange={e => highBlock.setValue(parseInt(e.target.value))} inputProps={{ 'aria-label': 'description' }} className={classes.input} />\n          </Grid>\n        </Grid>\n\n        {/* Inputs - Slider */}\n        <Grid item container justify={'center'} alignItems={'center'} direction={'column'}>\n          <Grid item>\n            <Typography variant={'body1'}>\n              Blocks range\n            </Typography>\n          </Grid>\n\n          <Grid item >\n            <Button style={{ color: '#ffffff', borderColor: '#ffffff' }} onClick={() => highBlock.setValue(lowBlock.value + 1)}>+1</Button>\n            <Button style={{ color: '#ffffff', borderColor: '#ffffff' }} onClick={() => highBlock.setValue(lowBlock.value + 10)}>+10</Button>\n            <Button style={{ color: '#ffffff', borderColor: '#ffffff' }} onClick={() => highBlock.setValue(lowBlock.value + 1000)}>+1000</Button>\n            <Button style={{ color: '#ffffff', borderColor: '#ffffff' }} onClick={() => highBlock.setValue(lowBlock.value + 10_000)}>+10,000</Button>\n            <Button style={{ color: '#ffffff', borderColor: '#ffffff' }} onClick={() => highBlock.setValue(lowBlock.value + 100_000)}>+100,000</Button>\n          </Grid>\n\n          <Grid item style={{ width: 300 }}>\n            <Slider style={{ width: '100%' }} value={[lowBlock.value, highBlock.value]} onChange={((event, value) => {\n              const values = value as number[];\n              lowBlock.setValue(values[0]);\n              highBlock.setValue(values[1]);\n            })}\n                    min={ORBS_TDE_ETHEREUM_BLOCK}\n                    max={latestBlockNumber}\n                    valueLabelDisplay={'auto'}\n            />\n\n          </Grid>\n        </Grid>\n\n        {/* Erc 20 contract*/}\n        <Grid item>\n          <Button style={{ color: '#ffffff', borderColor: '#ffffff' }} variant={\"outlined\"} onClick={readErc20Events}>Read past events - Thether</Button>\n        </Grid>\n        <Grid item>\n        {ercContractInteractionActive.value && <CircularProgress />}\n        </Grid>\n        <Grid item>\n          {(!ercContractInteractionActive.value) && (<Typography>{ercContractInteractionMessage.value}</Typography>)}\n          {(!ercContractInteractionActive.value && ercContractInteractionHasError.value) && (<Typography color={'error'}>{ercContractInteractionError.value}</Typography>)}\n        </Grid>\n\n        {/* Orbs Contract */}\n        <Grid item>\n          <Button style={{ color: '#ffffff', borderColor: '#ffffff' }} variant={\"outlined\"} onClick={readRewardsDistributionsHistory}>Read past events - Orbs rewards</Button>\n        </Grid>\n        <Grid item>\n          {orbsContractInteractionActive.value && <CircularProgress />}\n        </Grid>\n        <Grid item>\n          {(!orbsContractInteractionActive.value) && (<Typography>{orbsContractInteractionMessage.value}</Typography>)}\n          {(!orbsContractInteractionActive.value && orbsContractInteractionHasError.value) && (<Typography color={'error'}>{orbsContractInteractionError.value}</Typography>)}\n        </Grid>\n        Version 0.2.8\n      </Grid>\n    </div>\n);\n}\n\nexport default MainPage;\n","export const IS_DEV = process.env.NODE_ENV !== 'production';\n\nexport const CURRENT_LATEST = 10045412;\nexport const ORBS_TDE_ETHEREUM_BLOCK = 7439168;\nexport const ORBS_REWARDS_CONTRACT_ADDRESS = '0xb2969e54668394bcA9B8AF61bC39B92754b7A7a0';\nexport const THETHER_CONTRACT_ADDRESS = '0xdac17f958d2ee523a2206206994597c13d831ec7';\n","import React, {useCallback, useEffect, useMemo} from 'react';\nimport Web3 from 'web3';\nimport logo from './logo.svg';\nimport './App.css';\nimport MainPage from './pages/MainPage';\nimport orbsRewardsDistributionContractJSON from './contracts/OrbsRewardsDistribution.json';\nimport thetherContractJSON from './contracts/ThetherErc20Contract.json';\nimport {AbiItem} from \"web3-utils\";\nimport { Contract } from 'web3-eth-contract';\nimport {CURRENT_LATEST, ORBS_REWARDS_CONTRACT_ADDRESS, THETHER_CONTRACT_ADDRESS} from \"./config\";\nimport {logFunction} from \"./utils/utils\";\nimport { useNumber } from \"react-hanger\";\n\nfunction App() {\n  const hasEthereum = !!(window as any).ethereum;\n  const latestBlockNumber = useNumber(CURRENT_LATEST);\n\n  useEffect(() => {\n    async function tryToConnect() {\n      if (hasEthereum) {\n        try {\n          await (window as any).ethereum.enable();\n          console.log('Enabled !');\n        } catch (e) {\n          logFunction(`Error when eneabling : ${e}`)\n        }\n      }\n    }\n\n    tryToConnect();\n  }, [hasEthereum]);\n\n  const web3 = useMemo(() => {\n    if (!hasEthereum) {\n      return null;\n    }\n\n    const web3Instance = new Web3((window as any).ethereum as any);\n\n    return web3Instance;\n  }, [hasEthereum])\n\n  const readLatestBlockFunc = useCallback(async () => {\n    if (!web3) {\n      return 0;\n    }\n\n    const latest = await web3.eth.getBlockNumber();\n    latestBlockNumber.setValue(latest);\n    return latest\n\n  }, [web3, latestBlockNumber]);\n\n  useEffect(() => {\n    if (readLatestBlockFunc) {\n      readLatestBlockFunc().then(latestBlock => console.log({ latestBlock })).catch(e => console.error(e));\n    }\n  }, [readLatestBlockFunc])\n\n  const orbsRewardsDistributionContract = useMemo<Contract|undefined>(() => {\n    if (!hasEthereum || ! web3) {\n      return undefined;\n    }\n\n    const distributionContract = new web3.eth.Contract(\n      orbsRewardsDistributionContractJSON.abi as AbiItem[],\n      ORBS_REWARDS_CONTRACT_ADDRESS\n    );\n\n    return distributionContract;\n\n  }, [hasEthereum, web3]);\n  const erc20Contract = useMemo<Contract|undefined>(() => {\n    if (!hasEthereum || ! web3) {\n      return undefined;\n    }\n\n    const distributionContract = new web3.eth.Contract(\n      thetherContractJSON.abi as AbiItem[],\n      THETHER_CONTRACT_ADDRESS\n    );\n\n    return distributionContract;\n\n  }, [hasEthereum, web3]);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <MainPage latestBlockNumber={latestBlockNumber.value} hasEthereum={hasEthereum} distributionContract={orbsRewardsDistributionContract} ercContract={erc20Contract}/>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}