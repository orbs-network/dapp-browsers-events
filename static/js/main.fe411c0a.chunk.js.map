{"version":3,"sources":["utils/utils.ts","pages/MainPage.tsx","App.tsx","config.ts","serviceWorker.ts","index.tsx"],"names":["logFunction","params","isMobile","alert","join","console","log","MainPage","props","hasEthereum","distributionContract","lowBlock","useNumber","highBlock","ORBS_TDE_ETHEREUM_BLOCK","orbsContractInteractionActive","useBoolean","orbsContractInteractionHasError","orbsContractInteractionMessage","useStateful","orbsContractInteractionError","ercContractInteractionActive","ercContractInteractionHasError","ercContractInteractionMessage","ercContractInteractionError","readRewardsDistributionsHistory","useCallback","a","options","fromBlock","toBlock","filter","recipient","setTrue","setFalse","setValue","getPastEvents","events","readRewards","map","distributionEvent","returnValues","amount","toString","transactionHash","length","JSON","stringify","message","readErc20Events","Grid","container","direction","spacing","item","Typography","variant","value","Button","style","color","borderColor","onClick","CircularProgress","App","window","ethereum","useEffect","enable","tryToConnect","web3","useMemo","Web3","orbsRewardsDistributionContract","eth","Contract","orbsRewardsDistributionContractJSON","abi","className","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.fe411c0a.chunk.js","sourcesContent":["import {isMobile} from \"react-device-detect\";\n\nexport const logFunction = (...params: any) => {\n  if (isMobile) {\n    alert(params.join(' : '));\n  }\n\n  console.log(...params);\n}\n","import React, {useCallback} from 'react';\nimport Button from '@material-ui/core/Button';\nimport {CircularProgress, Grid, Typography} from '@material-ui/core';\nimport {Contract} from \"web3-eth-contract\";\nimport {logFunction} from \"../utils/utils\";\nimport { useBoolean, useStateful, useNumber } from 'react-hanger';\n\n\ninterface IProps {\n  hasEthereum?: any;\n  distributionContract?: Contract;\n}\n\nfunction MainPage(props: IProps) {\n  const { hasEthereum, distributionContract } = props;\n  const ORBS_TDE_ETHEREUM_BLOCK = 7439168;\n  const lowBlock = useNumber(ORBS_TDE_ETHEREUM_BLOCK);\n  const highBlock = useNumber(ORBS_TDE_ETHEREUM_BLOCK + 1);\n  const orbsContractInteractionActive = useBoolean(false);\n  const orbsContractInteractionHasError = useBoolean(false);\n  const orbsContractInteractionMessage = useStateful('');\n  const orbsContractInteractionError = useStateful('');\n\n  const ercContractInteractionActive = useBoolean(false);\n  const ercContractInteractionHasError = useBoolean(false);\n  const ercContractInteractionMessage = useStateful('');\n  const ercContractInteractionError = useStateful('');\n\n  const readRewardsDistributionsHistory = useCallback(async () => {\n    logFunction('Called')\n    const options = {\n      fromBlock: ORBS_TDE_ETHEREUM_BLOCK,\n      toBlock: 'latest',\n      filter: { recipient: '0xC5e624d6824e626a6f14457810E794E4603CFee2' },\n    };\n\n    if (!distributionContract) {\n      logFunction('No rewards distribution contract');\n      return;\n    }\n\n    // logFunction('Reading');\n\n    // Reset state\n    orbsContractInteractionActive.setTrue();\n    orbsContractInteractionHasError.setFalse();\n    orbsContractInteractionMessage.setValue('');\n    orbsContractInteractionError.setValue('');\n\n    try {\n      const events = await distributionContract.getPastEvents('RewardDistributed', options);\n\n      const readRewards = events.map(log => {\n        return {\n          distributionEvent: log.returnValues.distributionEvent as string,\n          amount: log.returnValues.amount.toString(),\n          transactionHash: log.transactionHash,\n        };\n      });\n\n      logFunction('Got rewards' , readRewards.length);\n      orbsContractInteractionMessage.setValue(`Got ${JSON.stringify(readRewards)}`)\n      return readRewards;\n    } catch (e) {\n      logFunction('error', e);\n      orbsContractInteractionHasError.setTrue();\n      orbsContractInteractionError.setValue(e.message);\n      return [];\n    } finally {\n      orbsContractInteractionActive.setFalse();\n    }\n  }, [distributionContract, orbsContractInteractionActive]);\n\n\n\n  const readErc20Events = useCallback(async () => {\n    logFunction('Called erc')\n\n    if (!distributionContract) {\n      logFunction('No erc contract');\n      return;\n    }\n\n    // Reset state\n    ercContractInteractionActive.setTrue();\n    ercContractInteractionHasError.setFalse();\n    ercContractInteractionMessage.setValue('');\n    ercContractInteractionError.setValue('');\n\n    try {\n      // const events = await distributionContract.getPastEvents('RewardDistributed', options);\n\n      // const readRewards = events.map(log => {\n      //   return {\n      //     distributionEvent: log.returnValues.distributionEvent as string,\n      //     amount: BigInt(log.returnValues.amount),\n      //     transactionHash: log.transactionHash,\n      //   };\n      // });\n\n      // logFunction('Got rewards' , readRewards.length);\n      return [];\n    } catch (e) {\n      logFunction('error', e);\n      return [];\n    } finally {\n      ercContractInteractionActive.setFalse();\n    }\n  }, [distributionContract, ercContractInteractionActive]);\n\n  if (!hasEthereum) {\n    return <div>\n      No ethereum provider\n    </div>\n  }\n\n  return (\n    <div>\n      <Grid container direction={'column'} spacing={2}>\n        {/* Titles */}\n        <Grid item>\n          <Typography variant={'h3'}>\n            Events reading tests\n          </Typography>\n          <Typography variant={'h4'}>\n            {lowBlock.value} - {highBlock.value}\n          </Typography>\n        </Grid>\n\n        {/* Erc 20 contract*/}\n        <Grid item>\n          <Button style={{ color: '#ffffff', borderColor: '#ffffff' }} variant={\"outlined\"} onClick={readErc20Events}>Read older events - ERC 20 contract</Button>\n        </Grid>\n        {ercContractInteractionActive.value && <CircularProgress />}\n        <Grid item>\n          {(!ercContractInteractionActive.value) && (<Typography>{ercContractInteractionMessage.value}</Typography>)}\n          {(!ercContractInteractionActive.value && ercContractInteractionHasError.value) && (<Typography color={'error'}>{ercContractInteractionError.value}</Typography>)}\n        </Grid>\n\n        {/* Orbs Contract */}\n        <Grid item>\n          <Button style={{ color: '#ffffff', borderColor: '#ffffff' }} variant={\"outlined\"} onClick={readRewardsDistributionsHistory}>Read older events - Orbs contract</Button>\n        </Grid>\n        {orbsContractInteractionActive.value && <CircularProgress />}\n        <Grid item>\n          {(!orbsContractInteractionActive.value) && (<Typography>{orbsContractInteractionMessage.value}</Typography>)}\n          {(!orbsContractInteractionActive.value && orbsContractInteractionHasError.value) && (<Typography color={'error'}>{orbsContractInteractionError.value}</Typography>)}\n        </Grid>\n      </Grid>\n    </div>\n);\n}\n\nexport default MainPage;\n","import React, {useCallback, useEffect, useMemo} from 'react';\nimport Web3 from 'web3';\nimport logo from './logo.svg';\nimport './App.css';\nimport MainPage from './pages/MainPage';\nimport orbsRewardsDistributionContractJSON from './contracts/OrbsRewardsDistribution.json';\nimport {AbiItem} from \"web3-utils\";\nimport { Contract } from 'web3-eth-contract';\nimport {ORBS_REWARDS_CONTRACT_ADDRESS} from \"./config\";\nimport {logFunction} from \"./utils/utils\";\n\nfunction App() {\n  const hasEthereum = !!(window as any).ethereum;\n\n  useEffect(() => {\n    async function tryToConnect() {\n      if (hasEthereum) {\n        try {\n          await (window as any).ethereum.enable();\n          logFunction('Enabled !');\n        } catch (e) {\n          logFunction(`Error when eneabling : ${e}`)\n        }\n      }\n    }\n\n    tryToConnect();\n  }, [hasEthereum]);\n\n  const web3 = useMemo(() => {\n    if (!hasEthereum) {\n      return null;\n    }\n\n    const web3Instance = new Web3((window as any).ethereum as any);\n\n    return web3Instance;\n  }, [hasEthereum])\n\n  const orbsRewardsDistributionContract = useMemo<Contract|undefined>(() => {\n    if (!hasEthereum || ! web3) {\n      return undefined;\n    }\n\n    const distributionContract = new web3.eth.Contract(\n      orbsRewardsDistributionContractJSON.abi as AbiItem[],\n      ORBS_REWARDS_CONTRACT_ADDRESS\n    );\n\n    return distributionContract;\n\n  }, [hasEthereum, web3]);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <MainPage hasEthereum={hasEthereum} distributionContract={orbsRewardsDistributionContract}/>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","export const IS_DEV = process.env.NODE_ENV !== 'production';\n\n\nexport const ORBS_REWARDS_CONTRACT_ADDRESS = '0xb2969e54668394bcA9B8AF61bC39B92754b7A7a0';\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}